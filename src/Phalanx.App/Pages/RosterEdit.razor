@page "/rosteredit"

@using Phalanx.App.Pages.Editing
@using WarHub.ArmouryModel.EditorServices
@using WarHub.ArmouryModel.EditorServices.Formatting

@using Microsoft.Extensions.Logging
@inject ILogger<RosterEdit> Logger

@implements IDisposable

@inject Phalanx.App.Pages.Printing.RosterFormatsProvider formatter
@inject Phalanx.App.Util.RosterEditorService EditorService


@if (Editor?.State.Roster is { } roster)
{
    <TitlePart>@roster.Name</TitlePart>
    <CascadingValue Value="@Editor">
        <FluentTabs @bind-ActiveId="@activeId">
            <FluentTab id="EditTab">Edit</FluentTab>
            <FluentTabPanel>
                <RootRosterEdit />
            </FluentTabPanel>
            <FluentTab id="OptionsTab">Options</FluentTab>
            <FluentTabPanel>
                <RosterOptions/>
            </FluentTabPanel>
            <FluentTab>Preview</FluentTab>
            <FluentTabPanel>
                <FluentSelect Items=formatter.Formats @bind-SelectedOption=@Format OptionText="@(x => x.Name)" />

                <Phalanx.App.Pages.Printing.RosterPreviewer RosterNode=roster Format=Format />
            </FluentTabPanel>
        </FluentTabs>
    </CascadingValue>
}
else
{
    <span>No roster selected</span>
    <InputFile id="rosterPicker" OnChange="OnInputFileChange" multiple/>
}

@code {
    public RosterEditor? Editor => EditorService.ActiveEditor;

    public RosterFormat Format { get; set; } = RosterFormatter.BuiltinFormatters[0];

    private bool LoadRostersMode { get; set; } = false;
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;


    Reference? editTab;
    Reference? optionsTab;
    String? activeId;

    private Task SwitchToEditor(){
        activeId = "EditTab";
        return Task.CompletedTask;
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Editor is null)
        {
            @* EditorService.LoadSampleRoster(); *@
        }
        if (Editor is not null)
        {
            Editor.OperationApplied += (op, state) => StateHasChanged();
        }
    }

    public void Dispose()
    {
        if (Editor is { } editor)
            editor.OperationApplied -= (op, state) => StateHasChanged();
    }

    public void ToggleLoadMode(){
        this.LoadRostersMode = !this.LoadRostersMode;
        @* EditorService.LoadSampleRoster(); *@
    }

    private void OnInputFileChange(InputFileChangeEventArgs e){
       EditorService.LoadSampleRoster();  
    }
        private class File
    {
        public string? Name { get; set; }
    }

        @* public void UpdateRosterEdit(){
        Console.Write("Place to stop");
        return;
    } *@

    public class UploadResult
    {
        public bool Uploaded { get; set; }
        public string? FileName { get; set; }
        public string? StoredFileName { get; set; }
        public int ErrorCode { get; set; }
    }
}
